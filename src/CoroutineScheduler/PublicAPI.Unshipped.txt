#nullable enable
CoroutineScheduler.AsyncSignal
CoroutineScheduler.AsyncSignal.AsyncSignal() -> void
CoroutineScheduler.AsyncSignal.NotifyAll() -> void
CoroutineScheduler.AsyncSignal.Wait(System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> CoroutineScheduler.AsyncSignalTask!
CoroutineScheduler.AsyncSignalAwaiter
CoroutineScheduler.AsyncSignalAwaiter.AsyncSignalAwaiter() -> void
CoroutineScheduler.AsyncSignalAwaiter.GetResult() -> void
CoroutineScheduler.AsyncSignalAwaiter.IsCompleted.get -> bool
CoroutineScheduler.AsyncSignalTask
CoroutineScheduler.AsyncSignalTask.GetAwaiter() -> CoroutineScheduler.AsyncSignalAwaiter
CoroutineScheduler.InternalReleaseException
CoroutineScheduler.InternalReleaseException.InternalReleaseException(string! message) -> void
CoroutineScheduler.InternalReleaseException.InternalReleaseException(string! message, System.Exception! innerException) -> void
CoroutineScheduler.InternalReleaseException.InternalReleaseException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
CoroutineScheduler.Scheduler
CoroutineScheduler.Scheduler.Resume() -> void
CoroutineScheduler.Scheduler.Scheduler() -> void
CoroutineScheduler.Scheduler.SpawnTask(System.Func<System.Threading.Tasks.Task!>! func) -> System.Threading.Tasks.Task!
CoroutineScheduler.Scheduler.UnhandledException -> System.EventHandler<CoroutineScheduler.UnhandledExceptionEventArgs!>?
CoroutineScheduler.Scheduler.Yield() -> CoroutineScheduler.YieldTask
CoroutineScheduler.UnhandledExceptionEventArgs
CoroutineScheduler.UnhandledExceptionEventArgs.Exception.get -> System.Exception!
CoroutineScheduler.UnhandledExceptionEventArgs.Rethrow.get -> bool
CoroutineScheduler.UnhandledExceptionEventArgs.Rethrow.set -> void
CoroutineScheduler.UnhandledExceptionEventArgs.RethrowAsync.get -> bool
CoroutineScheduler.UnhandledExceptionEventArgs.RethrowAsync.set -> void
